#version 400 core

in vec4 clipSpace;
in vec2 textureCoords;
in vec3 cameraPos;
in vec3 toLightVector;

out vec4 out_Color;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform float waterSpeed;
uniform sampler2D normalMap;
uniform vec3 lightColour;
uniform sampler2D depthMap;

const float waveStrength = 0.04;
const float reflectivity = 0.5;
const float shineDamper = 20.0;

void main(void) {

    vec2 ndc = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
    vec2 reflectionCoords = vec2(ndc.x,-ndc.y);
    vec2 refractionCoords = vec2(ndc.x,ndc.y);

    float near = 0.1;
    float far = 1000.0;
    float depth = texture(depthMap,refractionCoords).r;
    float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));

    depth = gl_FragCoord.z;
    float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
    float waterDepth = (floorDistance - waterDistance);

    vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + waterSpeed, textureCoords.y)).rg*0.1;
    distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y+waterSpeed);
    vec2 totalDistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength;

    refractionCoords += totalDistortion;
    refractionCoords = clamp(refractionCoords,0.001,0.999);

    reflectionCoords += totalDistortion;
    reflectionCoords.x = clamp(reflectionCoords.x,0.001,0.999);
    reflectionCoords.y = clamp(reflectionCoords.y,-0.999,-0.001);

    vec4 colour1 = texture(reflectionTexture,reflectionCoords);
    vec4 colour2 = texture(refractionTexture,refractionCoords);

    vec4 normalMapColour = texture(normalMap,distortedTexCoords);
    vec3 normal = vec3(normalMapColour.r * 2.0 - 1.0,normalMapColour.b * 3.0 - 1.0,normalMapColour.g * 2.0 - 1.0);
    normal = normalize(normal);

    vec3 viewVector = normalize(cameraPos);
    float refractionFactor = dot(viewVector,normal);



    vec3 reflectedLight = reflect(normalize(toLightVector), normal);
    float specular = max(dot(reflectedLight, viewVector), 0.0);
    specular = pow(specular, shineDamper);
    vec3 specularHighlights = lightColour * specular * reflectivity * clamp(waterDepth/5.0,0.0,1.0);;

	out_Color = mix(colour1,colour2,refractionFactor);
	out_Color = mix(out_Color,vec4(0.0,0.3,0.5,1.0),0.2) + vec4(specularHighlights,0.0);
    out_Color.a = clamp(waterDepth/5.0,0.0,1.0);
}